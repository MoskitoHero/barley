module Barley
class Serializer
  @cache: bool
  @expires_in: ActiveSupport::Duration

  attr_accessor object: ActiveRecord::Base
  def self.attributes: (*Symbol keys) -> untyped
  def self.attribute: (Symbol key, ?key_name: Symbol) ?{ () -> void } -> [untyped]
  def self.one: (Symbol key, ?key_name: Symbol, ?serializer: Serializer, ?cache: bool | Hash[Symbol, ActiveSupport::Duration]) ?{ () -> void } -> (Hash[untyped, untyped] | [untyped])
  def self.many: (Symbol key, ?key_name: Symbol, ?serializer: Serializer, ?cache: bool | Hash[Symbol, ActiveSupport::Duration]) ?{ () -> void } -> Array[untyped]
  def self.set_class_iv: (Symbol iv, Symbol key) -> [untyped]
  def initialize: (untyped object, ?cache: bool | Hash[Symbol, ActiveSupport::Duration]) -> void
  def as_json: -> Hash[Symbol, untyped]
  def clear_cache: (?key: String) -> untyped

  private
  def cache_base_key: -> String
  def defined_attributes: -> Array[Symbol]
  def _as_json: -> Hash[Symbol, untyped]
end
end

